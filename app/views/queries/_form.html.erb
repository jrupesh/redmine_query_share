<%= error_messages_for 'query' %>

<div class="box">
<div class="tabular">
<%= hidden_field_tag 'gantt', '1' if params[:gantt] %>

<p><label for="query_name"><%=l(:field_name)%></label>
<%= text_field 'query', 'name', :size => 80 %></p>

<% if !@query.new_record? && @query.user %>
<p><label for="query_author"><%=l(:field_author)%></label>
<%= @query.user.name %></p>
<% end %>

<% if User.current.admin? || User.current.allowed_to?(:manage_public_queries, @query.project) ||
      User.current.allowed_to?(:manage_group_queries, @query.project) %>

<p>
  <label><%=l(:field_visible)%></label>
  <label class="block"><%= radio_button 'query', 'visibility', Query::VISIBILITY_PRIVATE %> <%= l(:label_visibility_private) %></label>

  <% if User.current.admin? || User.current.allowed_to?(:manage_public_queries, @query.project) %>

  <label class="block"><%= radio_button 'query', 'visibility', Query::VISIBILITY_PUBLIC %> <%= l(:label_visibility_public) %></label>
  <label class="block"><%= radio_button 'query', 'visibility', Query::VISIBILITY_ROLES %> <%= l(:label_visibility_roles) %>:</label>
  <% Role.givable.sorted.each do |role| %>
    <label class="block role-visibility"><%= check_box_tag 'query[role_ids][]', role.id, @query.roles.include?(role), :id => nil %> <%= role.name %></label>
  <% end %>
  <%= hidden_field_tag 'query[role_ids][]', '' %>
  <% end %>

  <% if Setting.plugin_redmine_query_share['query_share_enable'] == "1" &&
          User.current.allowed_to?(:manage_group_queries, @query.project) %>
    <label class="block">
      <%= radio_button 'query', 'visibility', Query::VISIBILITY_GROUP %> <%= l(:label_visibility_group) %>
    </label>

    <label class="block role-visibility">
      <% user_count = @project.nil? ? Principal.active.count : Principal.member_of([@project]).count
       if user_count < Setting.plugin_redmine_query_share['user_count'].to_i %>
          <% user_list = @project.nil? ? Principal.active.map{ |s| [s.name, s.login.present? ? s.id : s.id] } :
                           Principal.member_of([@project]).sorted.map{ |s| [s.name, s.login.present? ? s.id : s.id] } +
                             Group.includes(:custom_values).where('custom_values.customized_type' => 'Principal',
                                'custom_values.custom_field_id' => Setting.plugin_redmine_query_share["group_cf"] ).map{
                                    |s| [s.name, s.id] } %>

      <%= select_tag( "query[principal_ids][]", options_for_select( user_list,
           @query.principals.map(&:id) ), :multiple => true, :style => "min-height:100px;width:300px;" ) %>

     <% else %>
        <%= text_field_tag 'query[principals_logins]', @query.principals.map{ |u| u.login.present? ? u.login : u.lastname }.join(', '),
                  :id => 'shared_users', :style => "width:50%;"  %>
        <span id="users_append_to" style="height: 100px; width: 50%; overflow: auto;"/>
      <% end %>
      <%= hidden_field_tag 'query[principal_ids][]', '' %>

      <script type="text/javascript">
        var availableTags = <%= raw_json collect_name_id_label_value_hash(@project) %>;
        function split( val ) {
          return val.split( /,\s*/ );
        }
        function extractLast( term ) {
          return split( term ).pop();
        }

        $( "#shared_users" )
          // don't navigate away from the field on tab when selecting an item
          .bind( "keydown", function( event ) {
            if ( event.keyCode === $.ui.keyCode.TAB &&
                $( this ).autocomplete( "instance" ).menu.active ) {
              event.preventDefault();
            }
          })
          .autocomplete({
            appendTo: "#users_append_to",
            minLength: 0,
            source: function( request, response ) {
              // delegate back to autocomplete, but extract the last term
              response( $.ui.autocomplete.filter(
                availableTags, extractLast( request.term ) ) );
            },
            focus: function() {
              // prevent value inserted on focus
              return false;
            },
            select: function( event, ui ) {
              var terms = split( this.value );
              // remove the current input
              terms.pop();
              // add the selected item
              terms.push( ui.item.value );
              // add placeholder to get the comma-and-space at the end
              terms.push( "" );
              this.value = terms.join( ", " );

              // var str_ids = $('#principalsids').val();
              // str_ids += ui.item.value + ',';
              // $('#principalsids').val(str_ids);

              return false;
            }
          });
      </script>
    </label>
  <% end %>

</p>
<% end %>

<p><label for="query_is_for_all"><%=l(:field_is_for_all)%></label>
<%= check_box_tag 'query_is_for_all', 1, @query.project.nil?, :class => (User.current.admin? ? '' : 'disable-unless-private') %></p>

<% unless params[:gantt] %>
<fieldset><legend><%= l(:label_options) %></legend>
<p><label for="query_default_columns"><%=l(:label_default_columns)%></label>
<%= check_box_tag 'default_columns', 1, @query.has_default_columns?, :id => 'query_default_columns',
      :onclick => 'if (this.checked) {$("#columns").hide();} else {$("#columns").show();}' %></p>

<p><label for="query_group_by"><%= l(:field_group_by) %></label>
<%= select 'query', 'group_by', @query.groupable_columns.collect {|c| [c.caption, c.name.to_s]}, :include_blank => true %></p>

<p><label><%= l(:button_show) %></label>
<%= available_block_columns_tags(@query) %></p>

<% if Redmine::VERSION::MAJOR >= 3 && Redmine::VERSION::MINOR >= 2 %>
<p><label><%= l(:label_total_plural) %></label>
<%= available_totalable_columns_tags(@query) %></p>
<% end -%>
</fieldset>
<% else %>
<fieldset><legend><%= l(:label_options) %></legend>
  <p><label><%= l(:button_show) %></label>
  <label class="inline"><%= check_box_tag "query[draw_relations]", "1", @query.draw_relations %> <%= l(:label_related_issues) %></label>
  <label class="inline"><%= check_box_tag "query[draw_progress_line]", "1", @query.draw_progress_line %> <%= l(:label_gantt_progress_line) %></label>
  </p>
</fieldset>
<% end %>
</div>

<fieldset id="filters"><legend><%= l(:label_filter_plural) %></legend>
<%= render :partial => 'queries/filters', :locals => {:query => query}%>
</fieldset>

<% unless params[:gantt] %>
<fieldset><legend><%= l(:label_sort) %></legend>
<% 3.times do |i| %>
<%= content_tag(:span, "#{i+1}:", :class => 'query_sort_criteria_count')%>
<%= label_tag "query_sort_criteria_attribute_" + i.to_s,
              l(:description_query_sort_criteria_attribute), :class => "hidden-for-sighted" %>
<%= select_tag("query[sort_criteria][#{i}][]",
               options_for_select([[]] + query.available_columns.select(&:sortable?).collect {|column| [column.caption, column.name.to_s]}, @query.sort_criteria_key(i)),
               :id => "query_sort_criteria_attribute_" + i.to_s)%>
<%= label_tag "query_sort_criteria_direction_" + i.to_s,
              l(:description_query_sort_criteria_direction), :class => "hidden-for-sighted" %>
<%= select_tag("query[sort_criteria][#{i}][]",
                options_for_select([[], [l(:label_ascending), 'asc'], [l(:label_descending), 'desc']], @query.sort_criteria_order(i)),
                :id => "query_sort_criteria_direction_" + i.to_s) %>
<br />
<% end %>
</fieldset>
<% end %>

<% unless params[:gantt] %>
<%= content_tag 'fieldset', :id => 'columns', :style => (query.has_default_columns? ? 'display:none;' : nil) do %>
<legend><%= l(:field_column_names) %></legend>
<%= render_query_columns_selection(query) %>
<% end %>
<% end %>

</div>

<%= javascript_tag do %>
$(document).ready(function(){
  $("input[name='query[visibility]']").change(function(){
    var roles_checked = $('#query_visibility_1').is(':checked');
    var private_checked = $('#query_visibility_0').is(':checked');
    var group_checked = $('#query_visibility_3').is(':checked');
    $("input[name='query[role_ids][]'][type=checkbox]").attr('disabled', !roles_checked);

    $("#query_principal_ids_").attr('disabled', !group_checked);
    if (group_checked == false){
      $("#query_principal_ids_ option").prop('selected', group_checked);
      $("#shared_users").attr("disabled", true)
    }else{
      $("#shared_users").attr("disabled", false)
    }

    if (!private_checked) $("input.disable-unless-private").attr('checked', false);
    $("input.disable-unless-private").attr('disabled', !private_checked);
  }).trigger('change');

});
<% end %>
